#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Build the coverage test
if(NOT MSVC)
  option(WITH_COVERAGE "Set up the C, CXX and linker flags to run the coverage test" OFF)
  if(WITH_COVERAGE)
    set(CTEST_START_WITH_EMPTY_BINARY_DIRECTORY_ONCE TRUE)
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING
      "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
    set(CMAKE_CXX_FLAGS_DEBUG
      "-g -O0 -Wall -W -Wunused-variable -Wunused-parameter -Wunused-function -Wunused -Wno-system-headers -Wno-deprecated -Woverloaded-virtual -Wwrite-strings -fprofile-arcs -ftest-coverage"
      CACHE STRING "Force the debug CXX flags for the coverage test" FORCE)
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG
      "-fprofile-arcs -ftest-coverage"
      CACHE STRING "Force the debug linker flags for the coverage test" FORCE)
    set(BUILD_ALL_DEP ON CACHE BOOL "All the dependencies are build" FORCE)
    configure_file(${CMAKE_SOURCE_DIR}/reg-test/CTestCustom.cmake.in
                   ${CMAKE_BINARY_DIR}/CTestCustom.cmake)
  endif(WITH_COVERAGE)
endif(NOT MSVC)
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Set the build name
set(CTEST_BUILD_NAME "${CMAKE_SYSTEM}_${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}_cmake-${CMAKE_VERSION}_${CMAKE_BUILD_TYPE}")
if(USE_SSE)
  set(CTEST_BUILD_NAME "${CTEST_BUILD_NAME}_sse")
endif(USE_SSE)
if(USE_OPENMP)
  set(CTEST_BUILD_NAME "${CTEST_BUILD_NAME}_openmp")
endif(USE_OPENMP)
if(USE_CUDA)
  set(CTEST_BUILD_NAME "${CTEST_BUILD_NAME}_cuda-${CUDA_VERSION}")
endif(USE_CUDA)
if(USE_OPENCL)
  set(CTEST_BUILD_NAME "${CTEST_BUILD_NAME}_opencl")
endif(USE_OPENCL)
if(NOT MSVC)
  unset(BUILDNAME CACHE)
  unset(BUILDNAME)
  set(BUILDNAME ${CTEST_BUILD_NAME} CACHE STRING "Build name variable for CDash" FORCE)
else(MSVC)
  set(BUILDNAME ${CTEST_BUILD_NAME} CACHE STRING "Build name variable for CDash")
  message(STATUS "The buildname might need manual editing")
endif(NOT MSVC)
mark_as_advanced(BUILDNAME)
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
  # The test data are dowloaded
set(DFOLDER ${CMAKE_BINARY_DIR}/reg-test/test-data)
if(NOT EXISTS "${DFOLDER}/test_data.tar.gz")
  file(MAKE_DIRECTORY ${DFOLDER})
  set(test_data_url "http://www.cs.ucl.ac.uk/staff/mmodat/niftyreg_test_data.tar.gz")
  message(STATUS "Downloading the test data: ${test_data_url}")
  file(DOWNLOAD
       ${test_data_url}
       "${DFOLDER}/test_data.tar.gz"
       SHOW_PROGRESS STATUS download_status)
  list(GET download_status 0 test_data_download_status)
  if(${test_data_download_status})
    message(WARNING "Error when downloading the test data, forcing BUILD_TESTING to OFF")
    set(BUILD_TESTING OFF CACHE BOOL "To build the unit tests" FORCE)
    endif(${test_data_download_status})
endif(NOT EXISTS "${DFOLDER}/test_data.tar.gz")

if(NOT EXISTS "${DFOLDER}/refImg2D.nii.gz")
  message(STATUS "Extracting test data in ${DFOLDER}")
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E tar xzf ${DFOLDER}/test_data.tar.gz
    WORKING_DIRECTORY ${DFOLDER}
    ERROR_VARIABLE test_data_extract_status
  )
  if(NOT ${test_data_extract_status} STREQUAL "")
    message(WARNING "Error when extracting the test data, forcing BUILD_TESTING to OFF")
    set(BUILD_TESTING OFF CACHE BOOL "To build the unit tests" FORCE)
  endif(NOT ${test_data_extract_status} STREQUAL "")
endif(NOT EXISTS "${DFOLDER}/refImg2D.nii.gz")
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
set(PLATFORM_LIST 0)
if(USE_CUDA)
  set(PLATFORM_LIST ${PLATFORM_LIST} 1)
endif(USE_CUDA)
if(USE_OPENCL)
  set(PLATFORM_LIST ${PLATFORM_LIST} 2)
endif(USE_OPENCL)
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
  set(EXEC reg_test_affine_deformation_field)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  foreach(CURRENT_PLATFORM ${PLATFORM_LIST})
    add_test(${EXEC}_2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_mat2D.txt ${DFOLDER}/affine_def2D.nii.gz ${CURRENT_PLATFORM})
    add_test(${EXEC}_3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_mat3D.txt ${DFOLDER}/affine_def3D.nii.gz ${CURRENT_PLATFORM})
  endforeach(CURRENT_PLATFORM)
#-----------------------------------------------------------------------------
  set(EXEC reg_test_blockMatching)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  foreach(CURRENT_PLATFORM ${PLATFORM_LIST})
    add_test(${EXEC}_2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/warpedBlockMatchingImg2D.nii.gz ${DFOLDER}/expectedBlockMatching_mat2D.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warpedBlockMatchingImg3D.nii.gz ${DFOLDER}/expectedBlockMatching_mat3D.txt ${CURRENT_PLATFORM})
  endforeach(CURRENT_PLATFORM)
#-----------------------------------------------------------------------------
  set(EXEC reg_test_changeDataType)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  add_test(${EXEC}_uchar_2D  ${EXEC} ${DFOLDER}/refImg2D.nii.gz uchar  ${DFOLDER}/refImg2D_uchar.nii.gz)
  add_test(${EXEC}_float_2D  ${EXEC} ${DFOLDER}/refImg2D.nii.gz float  ${DFOLDER}/refImg2D_float.nii.gz)
  add_test(${EXEC}_double_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz double ${DFOLDER}/refImg2D_double.nii.gz)
  add_test(${EXEC}_uchar_3D  ${EXEC} ${DFOLDER}/refImg3D.nii.gz uchar  ${DFOLDER}/refImg3D_uchar.nii.gz)
  add_test(${EXEC}_float_3D  ${EXEC} ${DFOLDER}/refImg3D.nii.gz float  ${DFOLDER}/refImg3D_float.nii.gz)
  add_test(${EXEC}_double_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz double ${DFOLDER}/refImg3D_double.nii.gz)
#-----------------------------------------------------------------------------
  set(EXEC reg_test_interpolation)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  foreach(CURRENT_PLATFORM ${PLATFORM_LIST})
    add_test(${EXEC}_nea_2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz ${DFOLDER}/warped_nearest2D.nii.gz 0 ${CURRENT_PLATFORM})
    add_test(${EXEC}_nea_3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz ${DFOLDER}/warped_nearest3D.nii.gz 0 ${CURRENT_PLATFORM})
    add_test(${EXEC}_lin_2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz ${DFOLDER}/warped_linear2D.nii.gz 1 ${CURRENT_PLATFORM})
    add_test(${EXEC}_lin_3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz ${DFOLDER}/warped_linear3D.nii.gz 1 ${CURRENT_PLATFORM})
    add_test(${EXEC}_cub_2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz ${DFOLDER}/warped_cubic2D.nii.gz 3 ${CURRENT_PLATFORM})
    add_test(${EXEC}_cub_3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz ${DFOLDER}/warped_cubic3D.nii.gz 3 ${CURRENT_PLATFORM})
  endforeach(CURRENT_PLATFORM)
#-----------------------------------------------------------------------------
  set(EXEC reg_test_leastTrimmedSquares)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  foreach(CURRENT_PLATFORM ${PLATFORM_LIST})
    add_test(${EXEC}_RigidLS2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_2D.txt ${DFOLDER}/P2_2D.txt 100 0 ${DFOLDER}/expectedRigidLTS_2D_100.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_AffineLS2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_2D.txt ${DFOLDER}/P2_2D.txt 100 1 ${DFOLDER}/expectedAffineLTS_2D_100.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_RigidLS3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_3D.txt ${DFOLDER}/P2_3D.txt 100 0 ${DFOLDER}/expectedRigidLTS_3D_100.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_AffineLS3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_3D.txt ${DFOLDER}/P2_3D.txt 100 1 ${DFOLDER}/expectedAffineLTS_3D_100.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_RigidLTS2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_2D.txt ${DFOLDER}/P2_2D.txt 70 0 ${DFOLDER}/expectedRigidLTS_2D_70.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_AffineLTS2D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_2D.txt ${DFOLDER}/P2_2D.txt 70 1 ${DFOLDER}/expectedAffineLTS_2D_70.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_RigidLTS3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_3D.txt ${DFOLDER}/P2_3D.txt 70 0 ${DFOLDER}/expectedRigidLTS_3D_70.txt ${CURRENT_PLATFORM})
    add_test(${EXEC}_AffineLTS3D_${CURRENT_PLATFORM} ${EXEC} ${DFOLDER}/P1_3D.txt ${DFOLDER}/P2_3D.txt 70 1 ${DFOLDER}/expectedAffineLTS_3D_70.txt ${CURRENT_PLATFORM})
  endforeach(CURRENT_PLATFORM)
#-----------------------------------------------------------------------------
  set(EXEC reg_test_matrix_operation)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_maths _reg_ReadWriteImage)
  add_test(${EXEC} ${EXEC} ${DFOLDER}/inputMatrix1.txt ${DFOLDER}/inputMatrix2.txt ${DFOLDER}/expectedMulMatrix.txt ${DFOLDER}/expectedAddMatrix.txt ${DFOLDER}/expectedSubMatrix.txt ${DFOLDER}/expectedExpMatrix.txt ${DFOLDER}/expectedLogMatrix.txt ${DFOLDER}/expectedInvMatrix.txt)
#-----------------------------------------------------------------------------
set(EXEC reg_test_svd)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_maths _reg_ReadWriteImage)
add_test(${EXEC}_0 ${EXEC} ${DFOLDER}/inputSVDMatrix.txt ${DFOLDER}/expectedUMatrix.txt ${DFOLDER}/expectedSMatrix.txt ${DFOLDER}/expectedVMatrix.txt)
#-----------------------------------------------------------------------------
if(USE_CUDA OR USE_OPENCL)
  set(EXEC reg_test_coherence_blockMatching)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  if(USE_CUDA)
    add_test(${EXEC}_2D_1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/warped_cubic2D.nii.gz 1)
    add_test(${EXEC}_3D_1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warped_cubic3D.nii.gz 1)
  endif(USE_CUDA)
  if(USE_OPENCL)
    add_test(${EXEC}_2D_2 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/warped_cubic2D.nii.gz 2)
    add_test(${EXEC}_3D_2 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warped_cubic3D.nii.gz 2)
  endif(USE_OPENCL)
  #
  set(EXEC reg_test_coherence_interpolation)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  if(USE_CUDA)
    add_test(${EXEC}_nea_2D_1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz 0 1)
    add_test(${EXEC}_lin_2D_1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz 1 1)
    add_test(${EXEC}_cub_2D_1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz 3 1)
    add_test(${EXEC}_nea_3D_1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz 0 1)
    add_test(${EXEC}_lin_3D_1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz 1 1)
    add_test(${EXEC}_cub_3D_1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz 3 1)
  endif(USE_CUDA)
  if(USE_OPENCL)
    add_test(${EXEC}_nea_2D_2 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz 0 2)
    add_test(${EXEC}_lin_2D_2 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz 1 2)
    add_test(${EXEC}_cub_2D_2 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_def2D.nii.gz 3 2)
    add_test(${EXEC}_nea_3D_2 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz 0 2)
    add_test(${EXEC}_lin_3D_2 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz 1 2)
    add_test(${EXEC}_cub_3D_2 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_def3D.nii.gz 3 2)
  endif(USE_OPENCL)
  #
  set(EXEC reg_test_coherence_affine_deformation_field)
  add_executable(${EXEC} ${EXEC}.cpp)
  target_link_libraries(${EXEC} _reg_aladin)
  if(USE_CUDA)
    add_test(${EXEC}_2D_1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_mat2D.txt ${DFOLDER}/affine_def2D.nii.gz 1)
    add_test(${EXEC}_3D_1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_mat3D.txt ${DFOLDER}/affine_def3D.nii.gz 1)
  endif(USE_CUDA)
  if(USE_OPENCL)
    add_test(${EXEC}_2D_2 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/affine_mat2D.txt ${DFOLDER}/affine_def2D.nii.gz 2)
    add_test(${EXEC}_3D_2 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/affine_mat3D.txt ${DFOLDER}/affine_def3D.nii.gz 2)
  endif(USE_OPENCL)
endif(USE_CUDA OR USE_OPENCL)
#-----------------------------------------------------------------------------
#	set(EXEC reg_test_fullAffine)
#	add_executable(${EXEC} ${EXEC}.cpp)
#	target_link_libraries(${EXEC} _reg_aladin)
#	add_test(${EXEC}_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/floImg2D.nii.gz ${DFOLDER}/affine_mat2D.txt)
#	add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/floImg3D.nii.gz ${DFOLDER}/affine_mat3D.txt)
#-----------------------------------------------------------------------------
#	set(EXEC reg_test_nonlinear_deformation_field)
#	add_executable(${EXEC} ${EXEC}.cpp)
#	target_link_libraries(${EXEC} _reg_f3d)
#	add_test(${EXEC}_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/nonlin_cpp2D.nii.gz ${DFOLDER}/nonlin_def2D.nii.gz)
#	add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/nonlin_cpp3D.nii.gz ${DFOLDER}/nonlin_def3D.nii.gz)
#-----------------------------------------------------------------------------
#	set(EXEC reg_test_compose_deformation_field)
#	add_executable(${EXEC} ${EXEC}.cpp)
#	target_link_libraries(${EXEC} _reg_f3d)
#	add_test(${EXEC}_2D ${EXEC} ${DFOLDER}/nonlin_def2D.nii.gz ${DFOLDER}/nonlin_com2D.nii.gz)
#	add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/nonlin_def3D.nii.gz ${DFOLDER}/nonlin_com3D.nii.gz)
#-----------------------------------------------------------------------------
#	set(EXEC reg_test_fullNonlinear)
#	add_executable(${EXEC} ${EXEC}.cpp)
#	target_link_libraries(${EXEC} _reg_f3d)
#	add_test(${EXEC}_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/floImg2D.nii.gz ${DFOLDER}/affine_mat2D.txt ${DFOLDER}/nonlin_cpp2D.nii.gz)
#	add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/floImg3D.nii.gz ${DFOLDER}/affine_mat3D.txt ${DFOLDER}/nonlin_cpp3D.nii.gz)
#-----------------------------------------------------------------------------
#	set(EXEC reg_test_fullSymNonlinear)
#	add_executable(${EXEC} ${EXEC}.cpp)
#	target_link_libraries(${EXEC} _reg_f3d)
#	add_test(${EXEC}_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/floImg2D.nii.gz ${DFOLDER}/affine_mat2D.txt ${DFOLDER}/nonlin_vel2D.nii.gz)
#	add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/floImg3D.nii.gz ${DFOLDER}/affine_mat3D.txt ${DFOLDER}/nonlin_vel3D.nii.gz)
#-----------------------------------------------------------------------------
set(EXEC reg_test_mindDescriptor)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_f3d)
add_test(${EXEC}_MINDDescriptor_2D1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/expectedMINDDescriptor2D_1.nii.gz)
add_test(${EXEC}_MINDDescriptor_3D1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/expectedMINDDescriptor3D_1.nii.gz)
add_test(${EXEC}_MINDDescriptor_2D2 ${EXEC} ${DFOLDER}/warped_linear2D.nii.gz ${DFOLDER}/expectedMINDDescriptor2D_2.nii.gz)
add_test(${EXEC}_MINDDescriptor_3D2 ${EXEC} ${DFOLDER}/warped_linear3D.nii.gz ${DFOLDER}/expectedMINDDescriptor3D_2.nii.gz)
#-----------------------------------------------------------------------------
set(EXEC reg_test_mindsscDescriptor)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_f3d)
add_test(${EXEC}_MINDSSCDescriptor_2D1 ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/expectedMINDSSCDescriptor2D_1.nii.gz)
add_test(${EXEC}_MINDSSCDescriptor_3D1 ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/expectedMINDSSCDescriptor3D_1.nii.gz)
add_test(${EXEC}_MINDSSCDescriptor_2D2 ${EXEC} ${DFOLDER}/warped_linear2D.nii.gz ${DFOLDER}/expectedMINDSSCDescriptor2D_2.nii.gz)
add_test(${EXEC}_MINDSSCDescriptor_3D2 ${EXEC} ${DFOLDER}/warped_linear3D.nii.gz ${DFOLDER}/expectedMINDSSCDescriptor3D_2.nii.gz)
#-----------------------------------------------------------------------------
set(EXEC reg_test_measure)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_f3d)
#   add_test(${EXEC}_LNCC_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/warped_sin2D.nii.gz LNCC)
#   add_test(${EXEC}_NMI_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/warped_sin2D.nii.gz NMI)
add_test(${EXEC}_SSD_2D ${EXEC} ${DFOLDER}/expectedMINDDescriptor2D_1.nii.gz ${DFOLDER}/expectedMINDDescriptor2D_2.nii.gz SSD ${DFOLDER}/expectedSSDValue2D.txt)
add_test(${EXEC}_MINDSSD_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/warped_linear2D.nii.gz MIND ${DFOLDER}/expectedMINDSSDValue2D.txt)
#   add_test(${EXEC}_LNCC_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warped_sin3D.nii.gz LNCC)
#   add_test(${EXEC}_NMI_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warped_sin3D.nii.gz NMI)
add_test(${EXEC}_SSD_3D ${EXEC} ${DFOLDER}/expectedMINDDescriptor3D_1.nii.gz ${DFOLDER}/expectedMINDDescriptor3D_2.nii.gz SSD ${DFOLDER}/expectedSSDValue3D.txt)
add_test(${EXEC}_MINDSSD_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warped_linear3D.nii.gz MIND ${DFOLDER}/expectedMINDSSDValue3D.txt)
#-----------------------------------------------------------------------------
set(EXEC reg_test_imageGradient)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_f3d)
#add_test(${EXEC}_imageGradientDF_2D ${EXEC} ${DFOLDER}/expectedMINDDescriptor2D_1.nii.gz ${DFOLDER}/expectedImageGradient2D.nii.gz 0)
#add_test(${EXEC}_imageGradientDF_3D ${EXEC} ${DFOLDER}/expectedMINDDescriptor3D_1.nii.gz ${DFOLDER}/expectedImageGradient3D.nii.gz 0)
add_test(${EXEC}_imageGradientSP_2D ${EXEC} ${DFOLDER}/expectedMINDDescriptor2D_1.nii.gz ${DFOLDER}/expectedImageGradient2D.nii.gz 1)
add_test(${EXEC}_imageGradientSP_3D ${EXEC} ${DFOLDER}/expectedMINDDescriptor3D_1.nii.gz ${DFOLDER}/expectedImageGradient3D.nii.gz 1)
#-----------------------------------------------------------------------------
if(BUILD_DEV)
set(EXEC reg_test_blockMatching_mrf)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_dev)
#add_test(${EXEC}_2D ${EXEC} ${DFOLDER}/refImg2D.nii.gz ${DFOLDER}/floImg2D.nii.gz)
add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/refImg3D.nii.gz ${DFOLDER}/warped_linear3D.nii.gz ${DFOLDER}/discretisedValues.dat)
#
set(EXEC reg_test_mrf)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_dev)
add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/dataCost.dat ${DFOLDER}/expectedLabeling.dat)
#
#
set(EXEC reg_test_mst)
add_executable(${EXEC} ${EXEC}.cpp)
target_link_libraries(${EXEC} _reg_dev)
#add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/indexNeighbours.dat ${DFOLDER}/EWeightMatrix.dat ${DFOLDER}/expectedOrderedList.dat ${DFOLDER}/expectedParentsList.dat ${DFOLDER}/expectedEdgeWeight.dat)
add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/indexNeighbours.dat ${DFOLDER}/EWeightMatrix.dat ${DFOLDER}/expectedParentsList.dat)
#
#set(EXEC reg_test_coherence_mrf)
#add_executable(${EXEC} ${EXEC}.cpp)
#target_link_libraries(${EXEC} _reg_dev)
#add_test(${EXEC}_3D ${EXEC} ${DFOLDER}/target_im.nii.gz ${DFOLDER}/moving_im.nii.gz similarity2.dat)
endif(BUILD_DEV)
#-----------------------------------------------------------------------------
